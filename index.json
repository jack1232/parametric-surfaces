{
  "api/ParametricSurfacesLib.AnimationFunctionEnum.html": {
    "href": "api/ParametricSurfacesLib.AnimationFunctionEnum.html",
    "title": "Enum AnimationFunctionEnum | Parametric Surfaces",
    "keywords": "Enum AnimationFunctionEnum Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll built-in math functions enumeration for animation public enum AnimationFunctionEnum Fields Astroid = 2 Astroid function Astroid2 = 3 Astroid2 function AstroidalTorus = 4 Astroidal torus function BohemianDome = 5 Bohemian dome function Breather = 6 Breather function Enneper = 7 Enneper function Figure8 = 8 Figure-8 function Henneberg = 9 Henneberg function Kiss = 10 Kiss function KleinBottle = 0 KleinBottle function KleinBottle2 = 1 KleinBottle2 function KleinBottle3 = 11 Klein bottle3 function Minimal = 12 Minimal function ParabolicCyclide = 13 Parabolic Cyclide function Pear = 14 Pear function PluckerConoid = 15 Plucker Conoid function Steiner = 16 Steiner function Torus = 17 Torus function Wellenkugel = 18 Wellenkugel function"
  },
  "api/ParametricSurfacesLib.ColormapDirectionEnum.html": {
    "href": "api/ParametricSurfacesLib.ColormapDirectionEnum.html",
    "title": "Enum ColormapDirectionEnum | Parametric Surfaces",
    "keywords": "Enum ColormapDirectionEnum Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll ColormapDirectionEnu. Colormap direction along a specified axis. public enum ColormapDirectionEnum Fields X = 0 X direction Y = 1 Y direction Z = 2 Z direction"
  },
  "api/ParametricSurfacesLib.ColormapEnum.html": {
    "href": "api/ParametricSurfacesLib.ColormapEnum.html",
    "title": "Enum ColormapEnum | Parametric Surfaces",
    "keywords": "Enum ColormapEnum Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll ColormapEnum enumeration. It defines over 60 commonly used colormaps, including commonly used names: jet, hsv, hot, cool, spring, summer, autumn, winter, bone, cooper, greys, etc. If combining these predefined colormaps with the SurfaceData.ColormapReverse field, you can get over 120 colormaps. public enum ColormapEnum Fields accent = 0 accent colormap autumn = 1 autumn colormap bathymetry = 2 bathymetry colormap blackbody = 3 blackbody colormap bluered = 4 bluered colormap bone = 5 bone colormap cdom = 6 cdom colormap chlorophyll = 7 chlorophyll colormap cool = 8 cool colormap cooper = 9 cooper colormap cubehelix = 10 cubehelix colormap dark2 = 11 dark2 colormap density = 12 density colormap earth = 13 earth colormap electric = 14 electric colormap fix1 = 15 fix1 colormap freesurface_blue = 16 freesurface_blue colormap freesurface_red = 17 freesurface_red colormap gradient = 18 gradient colormap gradient2 = 19 gradient2 colormap greens = 20 greens colormap greys = 21 greys colormap hot = 22 hot colormap hsv = 23 hsv colormap inferno = 24 inferno colormap jet = 25 jet colormap magma = 26 magma colormap ocean = 27 ocean colormap oxygen = 28 oxygen colormap paired = 29 paired colormap par = 30 par colormap pastel1 = 31 pastel1 colormap pastel2 = 32 pastel2 colormap phase = 33 phase colormap picnic = 34 picnic colormap plasma = 35 plasma colormap portland = 36 portland colormap rainbow = 37 rainbow colormap rainbow_soft = 38 rainbow_soft colormap rdbu = 39 rdbu colormap salinity = 40 salinity colormap set1 = 41 set1 colormap set2 = 42 set2 colormap set3 = 43 set3 colormap spring = 44 spring colormap summer = 45 summer colormap tab10 = 46 tab10 colormap tab20 = 47 tab20 colormap temperature = 48 temperature colormap terrain = 49 terrain colormap turbidity = 50 turbidity colormap turbo = 51 turbo colormap twilight = 52 twilight colormap velocity_blue = 54 velocity_blue colormap velocity_green = 55 velocity_green colormap viridis = 53 viridis colormap warm = 56 warm colormap white = 57 white colormap winter = 58 winter colormap yignbu = 59 yignbu colormap yiorrd = 60 yiorrd colormap"
  },
  "api/ParametricSurfacesLib.MathFunctionEnum.html": {
    "href": "api/ParametricSurfacesLib.MathFunctionEnum.html",
    "title": "Enum MathFunctionEnum | Parametric Surfaces",
    "keywords": "Enum MathFunctionEnum Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll built-in math functions enumeration public enum MathFunctionEnum Fields Astroid = 0 Astroid function Astroid2 = 1 Astroid2 function AstroidalTorus = 2 Astroidal torus function BohemianDome = 3 Bohemian dome function BoyShape = 4 Boy's shape function Breather = 5 Breather function Enneper = 6 Enneper function Figure8 = 7 Figure-8 function Henneberg = 8 Henneberg function Kiss = 9 Kiss function KleinBottle = 10 Klein bottle function KleinBottle2 = 11 Klein bottle2 function KleinBottle3 = 12 Klein bottle3 function Kuen = 13 Kuen function Minimal = 15 Minimal function Mobius = 16 Mobius function ParabolicCyclide = 17 Parabolic Cyclide function Pear = 18 Pear function PluckerConoid = 19 Plucker Conoid function Seashell = 20 Seashell function SievertEnneper = 21 Sievert-Enneper function Sphere = 22 Sphere function Steiner = 23 Steiner function Torus = 24 Torus function Wellenkugel = 25 Wellenkugel function layer = 14 Layered sphere function"
  },
  "api/ParametricSurfacesLib.ParametricSurfaceData.VertexData.html": {
    "href": "api/ParametricSurfacesLib.ParametricSurfaceData.VertexData.html",
    "title": "Struct ParametricSurfaceData.VertexData | Parametric Surfaces",
    "keywords": "Struct ParametricSurfaceData.VertexData Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll VertexData struct. It has members: Vertices, Colors, UVs, and Triangles (or Indices) arrays. public struct ParametricSurfaceData.VertexData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Colors colormap data public Color[] Colors Field Value Color[] Triangles triangle (or index) data public int[] Triangles Field Value int[] UVs UV coords public Vector2[] UVs Field Value Vector2[] Vertices vertex data public Vector3[] Vertices Field Value Vector3[]"
  },
  "api/ParametricSurfacesLib.ParametricSurfaceData.html": {
    "href": "api/ParametricSurfacesLib.ParametricSurfaceData.html",
    "title": "Class ParametricSurfaceData | Parametric Surfaces",
    "keywords": "Class ParametricSurfaceData Namespace ParametricSurfacesLib Assembly ParametricSurfacesLib.dll a static class SimpleSurfaceData contains methods to generate the vertex data for a simple 3D surface. public class ParametricSurfaceData Inheritance object ParametricSurfaceData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParametricSurfaceData() Constructor of the ParmetricSurfaceData class. public ParametricSurfaceData() Properties AnimationSpeed Animation speed public float AnimationSpeed { get; set; } Property Value float ColormapDirection whether or not reverse the colormap. public ColormapDirectionEnum ColormapDirection { get; set; } Property Value ColormapDirectionEnum ColormapName select colormap from the HeightmapEnum enumeration. public ColormapEnum ColormapName { get; set; } Property Value ColormapEnum ColormapReverse whether or not reverse the colormap. public bool ColormapReverse { get; set; } Property Value bool CustomColormap Specify a custom colormap public Gradient CustomColormap { get; set; } Property Value Gradient Parameters Parameters used to generate various parametric surfaces public float[] Parameters { get; set; } Property Value float[] UMax Maximum value of the u values. public float UMax { get; set; } Property Value float UMin Minimum value of the u values. public float UMin { get; set; } Property Value float UResolution Resolution (or subdivisions) along the u direction. public int UResolution { get; set; } Property Value int UseCustomColormap whether or not reverse the colormap. public bool UseCustomColormap { get; set; } Property Value bool VMax Maximum value of the v values. public float VMax { get; set; } Property Value float VMin Minimum value of the v values. public float VMin { get; set; } Property Value float VResolution Resolution (or subdivisions) along the v direction. public int VResolution { get; set; } Property Value int Methods Astroid(int, int, float, float, float) this method produces vertex data for a 3D Astroid surface described by parametric equations that use three parameters with default a = 1.5, b = 1.5, and c = 1.5. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData Astroid(int nu, int nv, float a = 1.5, float b = 1.5, float c = 1.5) Parameters nu int nv int a float parameter used for this function, default value = 1.5. b float parameter used for this function, default value = 1.5. c float parameter used for this function, default value = 1.5. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Astroid2(int, int, float, float, float) this method produces vertex data for a 3D Astroid 2 surface described by parametric equations that use three parameters with default a = 1, b = 1, and c = 1.2. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData Astroid2(int nu, int nv, float a = 1, float b = 1, float c = 1.2) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 1. c float parameter used for this function, default value = 1.2. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. AstroidalTorus(int, int, float, float, float) this method produces vertex data for a 3D Astroidal Torus surface described by parametric equations that use three parameters with default a = 2, b = 1, and c = 0.7854. The u and v data ranges: [0, 1], [0, 2*pi]. public ParametricSurfaceData.VertexData AstroidalTorus(int nu, int nv, float a = 2, float b = 1, float c = 0.7854) Parameters nu int nv int a float parameter used for this function, default value = 2. b float parameter used for this function, default value = 1. c float parameter used for this function, default value = 0.7854. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. BohemianDome(int, int, float, float) this method produces vertex data for a 3D Bohemian-Dome surface described by parametric equations that use two parameters with default a = 0.7 and b = 1. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData BohemianDome(int nu, int nv, float a = 0.7, float b = 1) Parameters nu int nv int a float parameter used for this function, default value = 0.7. b float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. BoyShape(int, int) this method produces vertex data for a 3D Boy-shape surface described by parametric equations. The u and v data ranges: [-0.1, pi], [-0.1, pi]. public ParametricSurfaceData.VertexData BoyShape(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Breather(int, int, float) this method produces vertex data for a 3D Breather surface described by parametric equations that use one parameter with default a = 0.4. The u and v data ranges: [-14, 14], [-12pi, 12pi]. public ParametricSurfaceData.VertexData Breather(int nu, int nv, float a = 0.4) Parameters nu int nv int a float parameter used for this function, default value = 0.4. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. CreateData(Func<float, float, Vector3>, int, int) This method generates the vertex position, vertex color, uv coordinate, and index data for a parametric 3D surface described by a math function provided by the user. public ParametricSurfaceData.VertexData CreateData(Func<float, float, Vector3> f, int nu = 101, int nv = 101) Parameters f Func<float, float, Vector3> a math function used to describe a parametric 3D surface. nu int resolution (or subdivisions) along the u direction. nv int resolution (or subdivisions) along the v direction. Returns ParametricSurfaceData.VertexData Enneper(int, int, float) this method produces vertex data for a 3D Enneper surface described by parametric equations that use one parameter with default a = 0.333. The u and v data ranges: [-3.3, 3.3], [-3.3, 3.3]. public ParametricSurfaceData.VertexData Enneper(int nu, int nv, float a = 0.333) Parameters nu int nv int a float parameter used for this function, default value = 0.333. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Figure8(int, int, float) this method produces vertex data for a 3D Figure 8 surface described by parametric equations that use one parameter with default a = 2.5. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData Figure8(int nu, int nv, float a = 2.5) Parameters nu int nv int a float parameter used for this function, default value = 2.5. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. GetDefaultSurfaceData(MathFunctionEnum) create the vertex position, vertex color, uv coordinate, and index data for a parametric 3D surface described by a built-in math function selected using math functions enumeration with default parameters. public ParametricSurfaceData.VertexData GetDefaultSurfaceData(MathFunctionEnum funcEnum) Parameters funcEnum MathFunctionEnum use math functions enumeration to select a built-in math function. Returns ParametricSurfaceData.VertexData this method returns vertex position, vertex color, uv coordinate, and index data arrays. Henneberg(int, int, float, float, float) this method produces vertex data for a 3D Henneberg surface described by parametric equations that use three parameters with default a = 1, and b = 1, and c = 1. The u and v data ranges: [0, 1], [0, 2*pi]. public ParametricSurfaceData.VertexData Henneberg(int nu, int nv, float a = 1, float b = 1, float c = 1) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 1. c float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Kiss(int, int, float, float) this method produces vertex data for a 3D Kiss surface described by parametric equations that use two parameters with default a = 1, and b = 1. The u and v data ranges: [-1, 1], [0, 2*pi]. public ParametricSurfaceData.VertexData Kiss(int nu, int nv, float a = 1, float b = 1) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. KleinBottle(int, int, float) this method produces vertex data for a 3D Klein-Bottle surface described by parametric equations. The u and v data ranges: [0, pi], [0, 2pi]. public ParametricSurfaceData.VertexData KleinBottle(int nu, int nv, float a = 1) Parameters nu int nv int a float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. KleinBottle2(int, int, float) this method produces vertex data for a 3D Klein-Bottle2 surface described by parametric equations. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData KleinBottle2(int nu, int nv, float a = 1) Parameters nu int nv int a float parameter used for this function, default parameters = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. KleinBottle3(int, int, float, float, float) this method produces vertex data for a 3D Klein-Bottle3 surface described by parametric equations that use three parameters with default a = 4, n = 3, and m = 1. The u and v data ranges: [0, 4pi], [0, 2pi]. public ParametricSurfaceData.VertexData KleinBottle3(int nu, int nv, float a = 4, float n = 3, float m = 1) Parameters nu int nv int a float parameter used for this function, default value = 4. n float parameter used for this function, default value = 3. m float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Kuen(int, int) this method produces vertex data for a 3D Kuen surface described by parametric equations. The u and v data ranges: [-5, 5], [-5, 5]. public ParametricSurfaceData.VertexData Kuen(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Layer(int, int) this method produces vertex data for a 3D layered sphere described by parametric equations. The u and v data ranges: [0, pi], [0, 2*pi]. public ParametricSurfaceData.VertexData Layer(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Minimal(int, int, float, float, float) this method produces vertex data for a 3D Minimal surface described by parametric equations that use three parameters with default a = 1, b = 1, and c = 1. The u and v data ranges: [-3, 1], [-3pi, 3pi]. public ParametricSurfaceData.VertexData Minimal(int nu, int nv, float a = 1, float b = 1, float c = 1) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 1. c float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Mobius(int, int) this method produces vertex data for a 3D mobius surface described by parametric equations. The u and v data ranges: [0, 6 * pi], [-1, 1]. public ParametricSurfaceData.VertexData Mobius(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. ParabolicCyclide(int, int, float, float) this method produces vertex data for a 3D ParabolicCyclide surface described by parametric equations that use two parameters with default a = 1, and b = 0.5. The u and v data ranges: [-5, 5], [-5, 5]. public ParametricSurfaceData.VertexData ParabolicCyclide(int nu, int nv, float a = 1, float b = 0.5) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 0.5. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Pear(int, int, float, float) this method produces vertex data for a 3D Pear surface described by parametric equations that use two parameters with default a = 1, and b = 1. The u and v data ranges: [0, 1], [0, 2pi]. public ParametricSurfaceData.VertexData Pear(int nu, int nv, float a = 1, float b = 1) Parameters nu int nv int a float parameter used for this function, default value = 1. b float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. PluckerConoid(int, int, float, float) this method produces vertex data for a 3D Plucker Conoid surface described by parametric equations that use two parameters with default a = 2, and b = 3. The u and v data ranges: [-2, 2], [0, 2pi]. public ParametricSurfaceData.VertexData PluckerConoid(int nu, int nv, float a = 2, float b = 3) Parameters nu int nv int a float parameter used for this function, default value = 2. b float parameter used for this function, default value = 3. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. RotateObject(Transform) this method is used to rotate the game object. public void RotateObject(Transform transform) Parameters transform Transform this is the transform attached to the game object. Seashell(int, int) this method produces vertex data for a 3D Seashell surface described by parametric equations. The u and v data ranges: [0, 6pi], [0, 2pi]. public ParametricSurfaceData.VertexData Seashell(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. SievertEnneper(int, int, float) this method produces vertex data for a 3D Sievert-Enneper surface described by parametric equations that use one parameter with default a = 1. The u and v data ranges: [-pi/2.1, pi/2.1], [0.001, pi/1.001]. public ParametricSurfaceData.VertexData SievertEnneper(int nu, int nv, float a = 0.4) Parameters nu int nv int a float parameter used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Sphere(int, int) this method produces vertex data for a 3D sphere described by parametric equations. The u and v data ranges: [0, pi], [0, 2*pi]. public ParametricSurfaceData.VertexData Sphere(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Steiner(int, int, float) this method produces vertex data for a 3D Steiner surface described by parametric equations that use one parameter with default a = 1. The u and v data ranges: [-2, 2], [0, 2*pi]. public ParametricSurfaceData.VertexData Steiner(int nu, int nv, float a = 1) Parameters nu int nv int a float parameters used for this function, default value = 1. Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Torus(int, int) this method produces vertex data for a 3D Torus surface described by parametric equations that use two parameters with default R = 1, r = 0.3, and a = 1. The u and v data ranges: [0, 2pi], [0, 2pi]. public ParametricSurfaceData.VertexData Torus(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays. Wellenkugel(int, int) this method produces vertex data for a 3D Wellenkugel surface described by parametric equations. The u and v data ranges: [0, 14.5], [0, 2pi]. public ParametricSurfaceData.VertexData Wellenkugel(int nu, int nv) Parameters nu int nv int Returns ParametricSurfaceData.VertexData This method returns a VertexData struct. It contains the vertex, colormap, uv coord, and triangle (or index) data arrays."
  },
  "api/ParametricSurfacesLib.html": {
    "href": "api/ParametricSurfacesLib.html",
    "title": "Namespace ParametricSurfacesLib | Parametric Surfaces",
    "keywords": "Namespace ParametricSurfacesLib Classes ParametricSurfaceData a static class SimpleSurfaceData contains methods to generate the vertex data for a simple 3D surface. Structs ParametricSurfaceData.VertexData VertexData struct. It has members: Vertices, Colors, UVs, and Triangles (or Indices) arrays. Enums ColormapDirectionEnum ColormapDirectionEnu. Colormap direction along a specified axis. ColormapEnum ColormapEnum enumeration. It defines over 60 commonly used colormaps, including commonly used names: jet, hsv, hot, cool, spring, summer, autumn, winter, bone, cooper, greys, etc. If combining these predefined colormaps with the SurfaceData.ColormapReverse field, you can get over 120 colormaps. MathFunctionEnum built-in math functions enumeration"
  },
  "docs/builtin_func.html": {
    "href": "docs/builtin_func.html",
    "title": "Demo: Built-in Functions | Parametric Surfaces",
    "keywords": "Demo: Built-in Functions This demo illustrates how to utilize 26 built-in mathematical functions provided in the ParametricSurfacesLib library to generate various 3D parametric surface plots. You can select the mathematical function from the MathFunctionEnum dropdown menu in the Inspector. Additionally, you can adjust the colormap and other parameters for the plots in real-time either in the Scene View or the Game View. Set up the Scene The demo examples in the Parametric Surfaces package include three Scenes located in the Parametric Surfaces/Scenes folder: Double-click on the scene named BuiltinFunctions to access the demo for built-in mathematical functions: In the Scene view window, you'll see the parametric Klein bottle surface displayed with the default jet colormap. In the Hierarchy window, there is only one GameObject named Surface. Clicking on Surface bring up its Inspector, where you can inspect the surface's properties. The material is specified using VertexColorMaterial. Additionally, the surface is attached to a C# script named BuilinFunctions.cs, which exposes several properties for manipulating the surface plot. C# Script To examine the C# script file used in this demo, navigate to the Parametric Surfaces/Scripts folder, double-click on the BuiltinFunctions.cs file: This will open the BuiltinFunctions.cs file in Visual Studio. Here is the code list for this script: using ParametricSurfacesLib; using System; using UnityEngine; [RequireComponent(typeof(MeshFilter))] [ExecuteInEditMode] [Serializable] public class BuiltinFunctions : MonoBehaviour { public MathFunctionEnum MathFunctions = MathFunctionEnum.KleinBottle; public ColormapEnum Colormaps = ColormapEnum.jet; public bool ColormapReverse = false; public ColormapDirectionEnum ColormapDirection = ColormapDirectionEnum.Y; public bool AutoRotation = true; private Mesh mesh; private ParametricSurfaceData psd; private ParametricSurfaceData.VertexData data; void Start() { psd = new ParametricSurfaceData(); mesh = new Mesh(); GetComponent<MeshFilter>().mesh = mesh; CreateSurface(); } void Update() { #if UNITY_EDITOR if (!Application.isPlaying) { bool needsUpdate = mesh == null || UnityEditor.Selection.activeGameObject == gameObject; if (needsUpdate) { CreateSurface(); var mf = GetComponent<MeshFilter>(); mf.sharedMesh = mesh; } } #endif if (Application.isPlaying) { CreateSurface(); if (AutoRotation) { psd.RotateObject(transform); } } } void CreateSurface() { psd ??= new ParametricSurfaceData(); psd.ColormapName = Colormaps; psd.ColormapReverse = ColormapReverse; psd.ColormapDirection = ColormapDirection; data = psd.GetDefaultSurfaceData(MathFunctions); mesh.Clear(); mesh.vertices = data.Vertices; mesh.colors = data.Colors; mesh.triangles = data.Triangles; mesh.RecalculateNormals(); } } First, we introduce the ParametricSurfacesLib library with the following using statement: using ParametricSurfacesLib; Next, we define several public fields whose values can be modified in the Inspector, including MathFunctionEnum, ColormapEnum, ColormapReverse, and ColormapDirectionEnum. All these fields are included in the ParametricSurfacesLib library. The Start and Update methods are standard for a typical Unity project. The key method to utilize the ParametricSurfacesLib library is the CreateSurface method. Inside this method, we establish the relationships between the public fields defined in the Inspector and the fields implemented in the ParametricSurfaceData class in the library. Next, we call the GetDefaultSurfaceData method to generate corresponding data, including Vertices, Colormaps, UVs, and Triangles (or Indices), for the 3D parametric surface. Subsequently, we assign this data to the Unity mesh object. Note that we don't assign the UV coord data to the mesh because we don't want to map any image texture onto our surface in this demo. Finally, we call the mesh.RecalculateNormals method to calculate the normal vector data that will be used for lighting. Start Play Mode let's begin the Play mode by clicking the Play button. You'll see the default Klein bottle surface with the jet colormap. You can rotate, pan, and zoom the plot using your mouse, as demonstrated in the image below: Next, clicking on the Colormaps dropdown menu reveals a list containing over 60 colormaps: You can select any colormap from this list to update the surface plot in real-time. For example, selecting the cool colormap from this list results in the following Klein bottle surface with the cool colormap. Additionally, checking the Colormap Reverse box reverses the cool colormap for the surface plot: This means that our ParametricSurfacesLib library contains over 120 colormaps (61 colormaps plus 61 reversed colormaps) that allow you to set colors for your 3D surface plots. You can also create various parametric surfaces by selecting different mathematical functions from the MathFunctions dropdown menu, which contains 26 built-in mathematical functions. The image below showcases selected parametric surfaces with different colormaps: Furthermore, you can adjust other parameters such as the smoothness and metallic in the Material section within the Inspector to enhance the appearance of your 3D parametric surface. Particularly, checking the Auto Rotation box enables continuous rotation of the surface plot on your screen."
  },
  "docs/custom_func.html": {
    "href": "docs/custom_func.html",
    "title": "Custom Functions from User | Parametric Surfaces",
    "keywords": "Custom Functions from User The true power of the ParametricSurfacesLib library lies in its ability to create 3D parametric surfaces using custom mathematical functions provided by the user. The custom function required by this library should have the following signature: Vector3 CustomFunction(float u, float v); // CustomFunction(float, float) In this demo, we will illustrate how to define a custom mathematical function and utilize it to generate a 3D parametric surface. The custom functions will have access to the same functionalities and features provided by the ParametricSurfacesLib library as the built-in functions, including vertex, UV, and colormap data, etc. Set Up the Scene Navigate to the Parametric Surfaces/Scenes folder and double-click on the scene called CustomFunction to open the demo. In the Scene view window, you'll observe the custom-function surface with the default jet colormap displayed. In the Hierarchy window, there is only one GameObject named Surface. Clicking on Surface brings up its Inspector, allowing you to inspect the surface's properties. The material is specified using VertexColorMaterial in this demo. Additionally, the surface is attached to a C# script named CustomFunction.cs, which exposes several properties for manipulating the surface plot. C# Script let's examine the C# script file used in this demo. Navigate to the Parametric Surfaces/Scripts folder and double-click on the CustomFunction.cs file. Here is the code list for this file: using UnityEngine; using ParametricSurfacesLib; using System; [RequireComponent(typeof(MeshFilter))] [ExecuteInEditMode] [Serializable] public class CustomFunction : MonoBehaviour { [Range(0.1f, 2f)] public float RTorus = 1f; [Range(0.1f, 2f)] public float RRing = 0.3f; Vector3 TorusFunction(float u, float v) { var x = (RTorus + RRing * Mathf.Cos(v)) * Mathf.Cos(u); var y = RRing * Mathf.Sin(v); var z = (RTorus + RRing * Mathf.Cos(v)) * Mathf.Sin(u); return new Vector3(x, y, z); } public ColormapEnum Colormaps = ColormapEnum.jet; public bool ColormapReverse = false; public ColormapDirectionEnum ColormapDirection = ColormapDirectionEnum.Y; public bool AutoRotation = true; public bool AutoUpdate = true; private Mesh mesh; private ParametricSurfaceData psd; private ParametricSurfaceData.VertexData data; void Start() { psd = new ParametricSurfaceData(); mesh = new Mesh(); GetComponent<MeshFilter>().mesh = mesh; CreateSurface(); } void Update() { #if UNITY_EDITOR if (!Application.isPlaying) { bool needsUpdate = mesh == null || UnityEditor.Selection.activeGameObject == gameObject; if (needsUpdate) { CreateSurface(); var mf = GetComponent<MeshFilter>(); mf.sharedMesh = mesh; } } #endif if (Application.isPlaying) { if (AutoUpdate) CreateSurface(); if (AutoRotation) psd.RotateObject(transform); } } void CreateSurface() { psd ??= new ParametricSurfaceData() { UMin = 0f, UMax = 2f * Mathf.PI, VMin = 0f, VMax = 2f * Mathf.PI, }; psd.ColormapName = Colormaps; psd.ColormapReverse = ColormapReverse; psd.ColormapDirection = ColormapDirection; data = psd.CreateData(TorusFunction, 201, 201); mesh.Clear(); mesh.vertices = data.Vertices; mesh.colors = data.Colors; mesh.triangles = data.Triangles; mesh.RecalculateNormals(); } } Here, we define the custom function for a torus with the following code snippet: Vector3 TorusFunction(float u, float v) { var x = (RTorus + RRing * Mathf.Cos(v)) * Mathf.Cos(u); var y = RRing * Mathf.Sin(v); var z = (RTorus + RRing * Mathf.Cos(v)) * Mathf.Sin(u); return new Vector3(x, y, z); } Within the custom TorusFunction method, we utilize two public fields, RTorus and RRing, to control the appearance of the torus. These fields can be easily adjusted by the user from the Inspector. The method returns a 3D point of the Vector3 type on the torus surface. Now, we can use this custom function inside the CreateSurface method in the same way as we did for the built-in functions implemented in the ParametricSurfacesLib library, but we need to specify the data range for the u and v variables used in our custom parametric function with the following code snippet: psd ??= new ParametricSurfaceData() { UMin = 0f, UMax = 2f * Mathf.PI, VMin = 0f, VMax = 2f * Mathf.PI, }; Next, we pass our custom TorusFunction to the CreateData method to generate corresponding vertex data for the torus surface. The rest of the code for this demo is the same as that used in creating 3D parametric surfaces with the built-in mathematical functions. Start Play Mode let's begin the Play mode by clicking the Play button. You'll observe our custom Torus surface with the jet colormap, as shown in the following image: By following the procedure described here, you can effortlessly create your own parametric surfaces by defining any parametric functions."
  },
  "docs/get_started.html": {
    "href": "docs/get_started.html",
    "title": "Get Started | Parametric Surfaces",
    "keywords": "Get Started Import Library To utilize the ParametricSurfacesLib library, you need to import it into your Unity project. Simply open the Asset Store window and import the Parametric Surfaces library package. The library can be found in the Parametric Surfaces/Plugins folder: Within the folder, you will find two files: ParametricSurfacesLib.dll and ParametricSurfacesLib.xml. The former is the class library file, while the latter is the xml file used for IntelliSense in Visual Studio. In practice, your Unity project only requires these two files to create parametric 3D surface plots. You can place these two files within your project wherever you prefer, but ensure they are placed in the same folder. Materials (Optional) To test the library, you'll need to utilize a material that supports vertex color. Within the Parametric Surfaces/Materials folder, we've created two shaders using Shader Graph, one named VertexColorGraph and the other TextureGraph. These shaders are then used to define two materials: VertexColorMaterial and TextureMaterial, as illustrated in the following image: The image below displays the VertexColorGraph. This graph simply passes the vertex color to the fragment shader. Additionally, we expose two properties, smoothness and metallic, enabling users to easily adjust these properties in the Inspector. The TextureGraph becomes more intricate, as depicted in the following image. This graph exposes four properties: smoothness, metallic, UV Length and Texture Image. The UV Length is of type Vector2, allowing users to repeat the image texture along the U and V directions, while the TextureImage property enables users to select different image textures. In the Parametric Surfaces/Textures folder, we've included several images that you can use to test the texture mapping on parametric surfaces. Camera Control (Optional) The Parametric Surfaces/Scripts folder contains a CameraOrbit.cs file. This file can be attached to the MainCamera object in a scene, as shown in the following image: This allows you to rotate, pan, and zoom the GameObject with your mouse in the game play mode. This camera control is optional, you can use whatever camera you like. With this preparation and setup, we'll show you how to use the ParametricSurfacesLib library to create several demo examples in the following sections."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Parametric Surfaces",
    "keywords": "Introduction This User Guide contains several demo examples demonstrating how to utilize the ParametricSurfacesLib class library to create various parametric 3D surface plots in the Unity game engine. These demos are developed and tested using the Universal Render Pipeline with Unity version 2022.3.20f1 LTS. The library is a .NET Standard 2.1 class library, designed to be platform-independent and compatible with other Unity versions. How this User Guide is Organized This User Guide is organized into four sections, each covering a different topic regarding the usage of the library. The following summaries of each section should provide you an overview of the content: Section 1, Get Started This section explains how to add the ParametricSurfacesLib class library to your Unity project and how to set up the packages and tools required for creating parametric 3D surface plots. Section 2, Demo: Built-in Functions This demo illustrates how to create parametric 3D surface plots in Unity using the ParametricSurfacesLib library and the built-in mathematical functions. You can generate various 3D surface charts with different colormaps by selecting different built-in mathematical functions and colormaps from dropdown menus in the Inspector. Section 3, Demo: Texture Mapping This demo explains how to map an image texture onto various parametric 3D surfaces. Section 4, Demo: Create Custom Functions This demo demonstrates how to create your own mathematical functions and use them to generate custom 3D parametric surfaces."
  },
  "docs/overview.html": {
    "href": "docs/overview.html",
    "title": "Overview | Parametric Surfaces",
    "keywords": "Overview Welcome to 3D Parametric Surfaces. This asset package contains a .NET C# Standard 2.1 class library called ParametricSurfacesLib.dll. It can be utilized to generate 3D parametric surface plots within the Unity game engine for any mathematical function describing a parametric 3D surface. The library incorporates a colormap class facilitating the creation of colormap data for the vertex colors of the Mesh object in Unity. Additionally, it encompasses a colormap enumeration that defines over 60 colormaps, featuring familiar names such as jet, hsv, hot, earth, cool, among others. Furthermore, the library exposes a ColormapReverse field enabling the reversal of the color order defined in the colormap. Consequently, the library offers access to over 120 colormaps (62 predefined colormaps + 62 reversed colormaps), empowering users to effortlessly set colors for their 3D parametric surface plots. This library also contains a MathFunc class that implements 26 built-in mathematical functions, including Torus, Figure8, BoyShape, Mobius, seashell, etc. These built-in functions can be used to test the capability and features of this library. The key component of this library is the ParametricSurfaceData class, which exposes various public fields used to define 3D parametric surfaces. This class also contains two public methods: CreateData and GetDefaultSurfaceData. The CreateData method generates data for vertices, colormaps, UV coordinates, and triangles (or indices) for any parametric 3D surface described by a set of parametric equations. The GetDefaultSurfaceData method is utilized to generate the same set of data using the built-in mathematical function with default parameters. This method allows you to utilize the MathFunctionEnum to select the built-in function. The 3D Parametric Surfaces library is compatible with various render pipelines in Unity, including the Build-in Render Pipeline (BRP), the Universal Render Pipeline (URP), the High Definition Render Pipeline (HDRP), as well as your own custom render pipeline. However, for the purpose of demonstrating the capabilities and features of this library, we will utilize the URP in this manual. Support Contact Feel free to reach out to us at support@drxudotnet.com with any questions or concerns. We're here to assist you. If you have suggestions for new features, we welcome your feedback. We recommend including your invoice ID with your initial contact with support."
  },
  "docs/texture_map.html": {
    "href": "docs/texture_map.html",
    "title": "Texture Mapping | Parametric Surfaces",
    "keywords": "Texture Mapping The ParametricSurfaceData.CreateData method in the ParametricSurfacesLib library also generates the UV coordinate data for a 3D parametric surface. We can utilize this UV data to map a texture image onto the 3D surface. In this demo, we will demonstrate how to incorporate texture mapping into the built-in parametric surfaces. Set up the Scene Navigate to the Parametric Surfaces/Scenes folder and double-click on the scene called TextureBuiltinFunctions to open the demo. In the Scene view window, you'll see the default Klein bottle surface with the default brick texture image displayed. In the Hierarchy window, there is only one GameObject named Surface. Clicking on Surface allows you to access its Inspector. From the Inspector, you can inspect the surface's properties. In this case, the material is specified using TextureMaterial. Additionally, the surface is attached to a C# script named TextureBuiltinFunctions.cs, which exposes several properties for manipulating the parametric surface plot. C# Script Let's examine the C# script file used in this demo. Navigate to the Parametric Surfaces/Scripts folder and double-click on the TextureBuiltinFunctions.cs file. Below is the code list for this file: using ParametricSurfacesLib; using System; using UnityEngine; [RequireComponent(typeof(MeshFilter))] [ExecuteInEditMode] [Serializable] public class TextureBuiltinFunctions : MonoBehaviour { public MathFunctionEnum MathFunctions = MathFunctionEnum.KleinBottle; public bool AutoRotation = true; private Mesh mesh; private ParametricSurfaceData psd; private ParametricSurfaceData.VertexData data; void Start() { psd = new ParametricSurfaceData(); mesh = new Mesh(); GetComponent<MeshFilter>().mesh = mesh; CreateSurface(); } void Update() { #if UNITY_EDITOR if (!Application.isPlaying) { bool needsUpdate = mesh == null || UnityEditor.Selection.activeGameObject == gameObject; if (needsUpdate) { CreateSurface(); var mf = GetComponent<MeshFilter>(); mf.sharedMesh = mesh; } } #endif if (Application.isPlaying) { CreateSurface(); if (AutoRotation) { psd.RotateObject(transform); } } } void CreateSurface() { psd ??= new ParametricSurfaceData(); data = psd.GetDefaultSurfaceData(MathFunctions); mesh.Clear(); mesh.vertices = data.Vertices; mesh.uv = data.UVs; mesh.triangles = data.Triangles; mesh.RecalculateNormals(); } } First, we introduce the ParametricSurfacesLib library using the statement: using ParametricSurfacesLib; Next, we define several public fields whose values can be modified in the Inspector. However, these fields do not include colormap-related fields because in this demo, we want to use the texture mapping rather than colormaps to add colors to our 3D parametric surfaces. The key method to utilize the ParametricSurfacesLib library is the CreateSurface method. Within this method, we first establish the relationships between the public fields defined in the Inspector and the fields implemented in the ParametricSurfaceData class in the ParametricSurfacesLib library. Next, we call the GetDefaultSurfaceData method to generate corresponding data for the built-in Klein bottle surface, including Vertices, UVs, and Triangles (or Indices). Note that we do not assign the Colors data to the mesh object because we don't use colormaps in this demo. Finally, we call the mesh.RecalculateNormals method to calculate the normal vector data that will be used for lighting. Start Play Mode let's initiate the Play mode by clicking the Play button. You'll observe the default Klein bottle surface with the brick texture. The brick image applied to the Klein bottle with the default parameter UV Length = (1, 1) results in a distorted texture map, where each brick appears elongated, as depicted in the image below: To enhance the appearance of the *Klein bottle\", we can adjust the UV Length parameter to (4, 1) in the Inspector. The resulting object is shown in the following image: By adjusting the UV Length parameter, you can obtain an appropriate texture map for different parametric surfaces. In the Parametric Surfaces/Textures folder, we provide several images that you can utilize to test the texture mapping on the 3D surfaces. Within the Inspector's Material section, you can select the desired texture image, as shown in the image below: Upon selecting a different image, the appearance of the Klein bottle changes accordingly, as depicted in the following image: Additionally, the Math Functions dropdown menu in the Texture Builtin Functions (Script) section within the Inspector enables you to choose a different mathematical function from 26 built-in functions, as illustrated below: The image below showcases selected parametric surfaces with various texture images: Furthermore, you can adjust other parameters such as the smoothness and metallic in the Material section within the Inspector to enhance the appearance of your 3D parametric surface. Particularly, checking the Auto Rotation box enables continuous rotation of the surface plot on your screen."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | Parametric Surfaces",
    "keywords": "Overview Welcome to 3D Parametric Surfaces. This asset package contains a .NET C# Standard 2.1 class library called ParametricSurfacesLib.dll. It can be utilized to generate 3D parametric surface plots within the Unity game engine for any mathematical function describing a parametric 3D surface. The library incorporates a colormap class facilitating the creation of colormap data for the vertex colors of the Mesh object in Unity. Additionally, it encompasses a colormap enumeration that defines over 60 colormaps, featuring familiar names such as jet, hsv, hot, earth, cool, among others. Furthermore, the library exposes a ColormapReverse field enabling the reversal of the color order defined in the colormap. Consequently, the library offers access to over 120 colormaps (61 predefined colormaps + 61 reversed colormaps), empowering users to effortlessly set colors for their 3D parametric surface plots. This library also contains a MathFunc class that implements 26 built-in mathematical functions, including Torus, Figure8, BoyShape, Mobius, seashell, etc. These built-in functions can be used to test the capability and features of this library. The key component of this library is the ParametricSurfaceData class, which exposes various public fields used to define 3D parametric surfaces. This class also contains two public methods: CreateData and GetDefaultSurfaceData. The CreateData method generates data for vertices, colormaps, UV coordinates, and triangles (or indices) for any parametric 3D surface described by a set of parametric equations. The GetDefaultSurfaceData method is utilized to generate the same set of data using the built-in mathematical function with default parameters. This method allows you to utilize the MathFunctionEnum to select the built-in function. The 3D Parametric Surfaces library is compatible with various render pipelines in Unity, including the Build-in Render Pipeline (BRP), the Universal Render Pipeline (URP), the High Definition Render Pipeline (HDRP), as well as your own custom render pipeline. However, for the purpose of demonstrating the capabilities and features of this library, we will utilize the URP in this manual. Support Contact Feel free to reach out to us at support@drxudotnet.com with any questions or concerns. We're here to assist you. If you have suggestions for new features, we welcome your feedback. We recommend including your invoice ID with your initial contact with support."
  }
}